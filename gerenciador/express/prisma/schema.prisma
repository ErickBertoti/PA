generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Posts {
  id               Int       @id @default(autoincrement())
  imageName        String    
  originalFileName String 
  fileType         String    
  caption          String?
  categoryId       Int
  created          DateTime  @default(now())
  category         Category  @relation(fields: [categoryId], references: [id])
  
  // Novos campos para controle de acesso
  ownerId          Int
  owner            Profile   @relation(fields: [ownerId], references: [id])
  isPublic         Boolean   @default(false)
  sharedWith       SharedAccess[]
}

model Category {
  id       Int   @id @default(autoincrement())
  name     String
  documents Posts[]
  Training Training[]
}

model Tool {
  id               Int   @id @default(autoincrement())
  name             String
  description      String
  responsible      String
  responsibleEmail String
  acquisitionDate  DateTime
  expirationDate   DateTime
  lastNotification DateTime?
}

model Training {
  id               Int           @id @default(autoincrement())
  title            String
  description      String
  imageName        String?   
  originalFileName String?    
  fileType         String?    
  trainingLinks    TrainingLink[]
  category         Category      @relation(fields: [categoryId], references: [id])
  categoryId       Int
  
  // Novos campos para controle de acesso
  ownerId          Int
  owner            Profile       @relation(fields: [ownerId], references: [id])
  isPublic         Boolean       @default(false)
  sharedWith       SharedAccess[]
}

model TrainingLink {
  id         Int       @id @default(autoincrement())
  url        String
  training   Training  @relation(fields: [trainingId], references: [id])
  trainingId Int
}

model Permission {
  id       Int   @id @default(autoincrement())
  name     String
  profileId Int
  profile   Profile   @relation(fields: [profileId], references: [id])
}

model Profile {
  id          Int           @id @default(autoincrement())
  name        String
  permissions Permission[]
  email       String        @unique
  password    String
  createdAt   DateTime      @default(now())
  
  // Novo campo para controle de papel (admin/usuário)
  // Relações para propriedade de conteúdo
  posts       Posts[]
  trainings   Training[]
  
  // Relação para acesso compartilhado
  accessTo    SharedAccess[]
}

// Modelo para controle de acesso compartilhado
model SharedAccess {
  id          Int       @id @default(autoincrement())
  
  // Relação com usuário que recebe acesso
  userId      Int
  user        Profile   @relation(fields: [userId], references: [id])
  
  // Relações polimórficas para diferentes tipos de conteúdo
  postId      Int?
  post        Posts?    @relation(fields: [postId], references: [id])
  
  trainingId  Int?
  training    Training? @relation(fields: [trainingId], references: [id])
  
  // Permissões específicas
  canView     Boolean   @default(true)
  canEdit     Boolean   @default(false)
  canDelete   Boolean   @default(false)
  
  // Nota: A validação para garantir que apenas um tipo de conteúdo seja associado
  // será implementada na lógica da aplicação
}
